<start> ::= <preprocessing> <algorithm> | <algorithm>
#PREPROCESSING
<preprocessing> ::=  <imputation> | <bounding> | <dimensionality> | <binarizer> | <imputation> <bounding> | <imputation> <binarizer> | <imputation> <dimensionality> | <bounding> <dimensionality> | <imputation> <bounding> <dimensionality>
<imputation> ::= preprocessing:imputer <strategy_imp>
<bounding> ::= preprocessing:normalizer <norm> | preprocessing:min_max | preprocessing:max_abs | preprocessing:robust_scaler with_centering:<boolean> with_scaling:<boolean> | preprocessing:standard_scaler with_mean:<boolean> with_std:<boolean>
<dimensionality> ::= <feature_selection> | <feature_construction> | <feature_selection> <feature_construction>
<binarizer> ::= preprocessing:binarizer threshold:<threshold_bin>
<feature_selection> ::= preprocessing:variance_threshold | preprocessing:select_k_best k:<features> <score_function> | preprocessing:percentile percentile:<percentile> <score_function> | preprocessing:select_fpr alpha:<value_rand_1> <score_function> | preprocessing:select_fwe alpha:<value_rand_1> <score_function> | preprocessing:select_fdr alpha:<value_rand_1> <score_function> | preprocessing:rfe n_features_to_select:<featuresToSelect> step:<value_rand_1> | preprocessing:rfe_cv <cv_rfe> <scoring_rfe> step:<value_rand_1> | preprocessing:select_from_model <threshold_sfm> prefit:<boolean> | preprocessing:incremental_pca n_components:<featuresToSelect> whiten:<boolean> | preprocessing:pca n_components:<featuresToSelect> whiten:<boolean> | preprocessing:fast_ica n_components:<featuresToSelect> <algorithm_fastica> whiten:<boolean> <funct> <max_iter_fastica> tol:<tol> | preprocessing:gaussian_random_projection n_components:<featuresToSelect> eps:<value_rand_1>  | preprocessing:sparse_random_projection n_components:<featuresToSelect> <density> eps:<value_rand_1> dense_output:<boolean> | preprocessing:rbf_sampler gamma:<gamma_kernelApprox> n_components:<featuresToSelect> | preprocessing:nystroem kernel:<kernel> gamma:<gamma_kernelApprox> coef0:<coef0> degree:<degree_1> n_components:<featuresToSelect> | preprocessing:truncated_svd n_components:<featuresToSelect> n_iter:<n_iter> tol:<tol> <algorithm_tsvd> | preprocessing:feature_agglomeration n_clusters:<featuresToSelect> <affinity> <compute_full_tree>
<feature_construction> ::= preprocessing:polynomial_features degree:<degree_1> interaction_only:<boolean> include_bias:<boolean>
<strategy_imp> ::= strategy:mean | strategy:median | strategy:most_frequent
<norm> ::= norm:l1 | norm:l2
<boolean> ::= True | False
<degree_1>  ::= RANDINT(2,10)
<features> ::= RANDINT(2,181)
<score_function> ::= score_function:f_classif | score_function:chi2
<percentile> ::= RANDINT(5,95)
<value_rand_1> ::= RANDFLOAT(0.0,1.0)
<featuresToSelect> ::= RANDINT(1,181)
<density> ::= density:auto | density:<density_randfloat>
<density_randfloat> ::= RANDFLOAT(0.00001,1.0)
<cv_rfe> ::= cv:2 | cv:3 | cv:5 | cv:10
<scoring_rfe> ::= scoring:mean_absolute_error | scoring:mean_squared_error | scoring:median_absolute_error | scoring:r2 | scoring:None
<threshold_sfm> ::= threshold:None | threshold:median | threshold:mean | threshold:<threshold_sfm_randfloat>
<threshold_sfm_randfloat> ::= RANDFLOAT(0.0,1.0)
<algorithm_fastica> ::= algorithm:parallel | algorithm:deflation
<funct> ::= fun:logcosh | fun:exp | fun:cube
<max_iter_fastica> ::= max_iter:10 | max_iter:100 | max_iter:250 | max_iter:500 | max_iter:750 | max_iter:100
<tol> ::= RANDFLOAT(0.0000000001,0.1)
<gamma_kernelApprox> ::= RANDFLOAT(0.000030518,8.0)
<kernel> ::= linear | poly | rbf | sigmoid
<coef0> ::= RANDFLOAT(0.0,1000.0)
<n_iter> ::= 5 | 10 | 25 | 50 | 100 | 250 | 500 | 750
<algorithm_tsvd> ::= algorithm:arpack | algorithm:randomized
<affinity> ::= affinity:euclidean <linkage_type0>| <affinity_options> <linkage_type1>
<affinity_options> ::= affinity:l1 | affinity:l2 | affinity:manhattan | affinity:cosine
<linkage_type0> ::= linkage:ward | <linkage_type1>
<linkage_type1> ::= linkage:complete | linkage:average
<compute_full_tree> ::= compute_full_tree:True | compute_full_tree:False | compute_full_tree:auto
<threshold_bin> ::= RANDFLOAT(0.000001,100)
#ALGORITHM
<algorithm> ::= <strong> | <weak> | <tree_ensemble>
<strong> ::= <trees> | <naive_bayes> | <svm>
<trees> ::= classifier:extra_tree <criterion>  <splitter> <max_depth> min_weight_fraction_leaf:<min_weight_fraction_leaf> <max_features>  <max_leaf_nodes> <class_weight> | classifier:decision_tree <criterion>  <splitter> <max_depth>  min_weight_fraction_leaf:<min_weight_fraction_leaf> <max_features> <max_leaf_nodes> <class_weight> presort:<presort>
<naive_bayes> ::= classifier:gaussian_nb | classifier:bernouli_nb alpha:<alpha> binarize:<value_rand_1> fit_prior:<boolean>| classifier:multinominal_nb alpha:<alpha> fit_prior:<boolean>
<svm> ::= classifier:svc kernel:<kernel> degree:<degree_1> shrinking:<boolean> probability:<boolean> tol:<tol> <class_weight> max_iter:<max_iter> | classifier:nu_svc kernel:<kernel> degree:<degree_1> shrinking:<boolean> probability:<boolean> tol:<tol> <class_weight> max_iter:<max_iter>
<weak> ::= <nearest> | <discriminant> | <logistic> | <passive> | <gradient_options> | <ridge>
<nearest> ::= classifier:knn n_neighbors:<n_neighbors> <weights> <k_algorithm> leaf_size:<leaf_size> p:<p> <d_metric> | classifier:radius_neighbors radius:<radius> <weights> <k_algorithm> leaf_size:<leaf_size> p:<p> <d_metric> | classifier:ncentroid <d_metric> <shrinking_threshold>
<discriminant> ::= classifier:lda <solver_discrim> store_covariance:<boolean> tol:<tol> | classifier:qda reg_param:<value_rand_1> store_covariance:<boolean> tol:<tol> 
<logistic> ::= classifier:logistic tol:<tol> fit_intercept:<boolean> <class_weight> <solver_lr_options> max_iter:<max_iter_lr> warm_start:<boolean> | classifier:logistic_cv fit_intercept:<boolean> <cv> <solver_lr_options> tol:<tol> max_iter:<max_iter_lr> <class_weight> refit:<boolean>  
<passive> ::= classifier:passive_aggressive fit_intercept:<boolean> tol:<tol> shuffle:<boolean> <loss_sgd> warm_start:<boolean> <class_weight> max_iter:<n_iter>
<gradient_options> ::= classifier:perceptron <penalty> alpha:<alpha> fit_intercept:<boolean> tol:<tol> shuffle:<boolean> eta0:<value_rand_1> <class_weight> warm_start:<boolean> max_iter:<n_iter>
<ridge> ::= classifier:ridge alpha:<alpha> fit_intercept:<boolean> normalize:<boolean> copy_X:<boolean> max_iter:<max_iter> tol:<tol> <class_weight> <solver_ridge> | classifier:ridge_cv alpha:<alpha> fit_intercept:<boolean> normalize:<boolean> <cv> <class_weight>  
<tree_ensemble> ::= classifier:ada  n_estimators:<n_estimators> learning_rate:<learning_rate_ada> <algorithm_ada> | classifier:gradient_boosting <loss_gradient> learning_rate:<lr_gradient_boosting> n_estimators:<n_estimators> subsample:<value_rand_1> min_weight_fraction_leaf:<min_weight_fraction_leaf> <max_depth> <max_features> <max_leaf_nodes> warm_start:<boolean> presort:<presort> | classifier:random_forest  <criterion> <max_depth> n_estimators:<n_estimators> min_weight_fraction_leaf:<min_weight_fraction_leaf> <max_features> <max_leaf_nodes> <bootstrap_and_oob> warm_start:<boolean> <class_weight_Trees> | classifier:extra_trees n_estimators:<n_estimators> <criterion> <max_depth> min_weight_fraction_leaf:<min_weight_fraction_leaf> <max_features> <max_leaf_nodes> <bootstrap_and_oob> warm_start:<boolean> <class_weight_Trees>
<criterion> ::= criterion:entropy | criterion:gini
<splitter> ::= splitter:best | splitter:random
<class_weight> ::= class_weight:balanced | class_weight:None
<max_features> ::= max_features:<max_features_randfloat> | max_features:sqrt | max_features:log2 | max_features:None
<max_features_randfloat> ::= RANDFLOAT(0.01,1.0)
<max_depth> ::= max_depth:<max_depth_randint> | max_depth:None
<max_depth_randint> ::= RANDINT(1,100000)
<min_weight_fraction_leaf> ::= RANDFLOAT(0.0,0.5)
<max_leaf_nodes> ::= max_leaf_nodes:<max_leaf_nodes_randint> | max_leaf_nodes:None
<max_leaf_nodes_randint> ::= RANDINT(2,100000)
<presort> ::= True | False | auto
<alpha> ::= RANDFLOAT(0.0,9.0)
<max_iter> ::= 10 | 100 | 500 | 1000
<n_neighbors> ::= RANDINT(1,30)
<weights> ::= weights:uniform | weights:distance
<k_algorithm> ::= algorithm:auto | algorithm:brute | algorithm:kd_tree | algorithm:ball_tree
<leaf_size> ::= RANDINT(5,100)
<p> ::= RANDINT(1,15)
<d_metric> ::= metric:euclidean | metric:manhattan | metric:chebyshev | metric:minkowski
<radius> ::= RANDFLOAT(1.0,30.0)
<shrinking_threshold> ::= shrink_threshold:<shrink_threshold_randfloat> | shrink_threshold:None
<shrink_threshold_randfloat> ::= RANDFLOAT(0.0,30.0)
<solver_discrim> ::= solver:svd | solver:lsqr
<solver_lr_options> ::= solver:liblinear | solver:sag | solver:newton-cg | solver:lbfgs
<max_iter_lr> ::= 10 | 100 | 150 | 300 | 350 | 400 | 450 |500
<cv> ::= cv:<cv_randint> | cv:None
<cv_randint> ::= RANDINT(2,10)
<loss_sgd> ::= loss:hinge| loss:log| loss:modified_huber | loss:squared_hinge | loss:perceptron | loss:squared_loss | loss:huber | loss:epsilon_insensitive | loss:squared_epsilon_insensitive
<penalty> ::= penalty:l1 | penalty:l2
<solver_ridge> ::= solver:auto | solver:svd | solver:cholesky | solver:lsqr | solver:sparse_cg | solver:sag
<algorithm_ada> ::= algorithm:SAMME.R | algorithm:SAMME
<n_estimators> ::=  5 | 10 | 15 | 20 | 25 | 30 | 35 | 40 | 45 | 50
<learning_rate_ada> ::= RANDFLOAT(0.01,2.0)
<loss_gradient> ::= loss:deviance | loss:exponential
<lr_gradient_boosting> ::= RANDFLOAT(0.0000000001,0.1)
<bootstrap_and_oob> ::= bootstrap:True  oob_score:<boolean> | bootstrap:False oob_score:False
<class_weight_Trees> ::= class_weight:balanced | class_weight:balanced_subsample | class_weight:None